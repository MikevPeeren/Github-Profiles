{"version":3,"sources":["components/SearchForm.tsx","components/ProjectCard.tsx","components/AvatarCard.tsx","constants/avatarcard.ts","api/GithubApi.ts","components/GithubProfile.tsx","constants/general.ts","App.tsx","index.tsx"],"names":["SearchForm","props","useState","warningText","setWarningText","inputElement","useRef","setNewGithubUser","handleUsernameSearch","current","value","useEffect","errorText","InputGroup","className","FormControl","ref","onKeyPress","event","key","placeholder","Append","Button","onClick","ProjectCard","repository","Card","Body","Title","name","Subtitle","forkCount","stargazers","totalCount","Text","description","AvatarCard","login","avatarUrl","bio","repositoriesCount","watchingCount","Img","variant","src","setupGitHubConnection","axios","create","baseURL","headers","Authorization","process","REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN","searchForGithubProfile","inputFieldGitHubUser","a","GET_USER","post","query","then","result","data","errors","Error","user","catch","error","searchForGithubTopRepositories","GET_TOP_REPOSITORIES","repositories","edges","GithubProfile","setInputFieldGitHubUser","watching","githubUser","setGithubUser","node","id","createdAt","url","githubTopRepositories","setGithubTopRepositories","setErrorText","message","length","searchForGitHubUser","searchForGithubRepositories","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b02ba734.chunk.js","sourcesContent":["// React\nimport React, { useRef, useState, useEffect } from 'react';\n\n// Bootstrap\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\n\n// CSS\nimport './SearchForm.scss';\n\n// Icons\nimport { FaSearch } from 'react-icons/fa';\n\ninterface SearchFormProps {\n\tsetNewGithubUser: Function;\n\terrorText: string;\n}\n\nconst SearchForm: React.FC<SearchFormProps> = (props) => {\n\tconst [warningText, setWarningText] = useState('');\n\tconst inputElement = useRef(null);\n\n\tconst { setNewGithubUser } = props;\n\n\tconst handleUsernameSearch = () => {\n\t\tsetWarningText('');\n\t\t//@ts-ignore\n\t\tif (inputElement && inputElement.current && inputElement.current.value !== '')\n\t\t\t//@ts-ignore\n\t\t\tsetNewGithubUser(inputElement.current.value);\n\t\telse setWarningText('Error');\n\t};\n\n\tuseEffect(() => {\n\t\tsetWarningText(props.errorText);\n\t}, [props.errorText]);\n\n\treturn (\n\t\t<>\n\t\t\t<InputGroup className=\"SearchForm\">\n\t\t\t\t<FormControl\n\t\t\t\t\tref={inputElement}\n\t\t\t\t\tonKeyPress={(event: any) => {\n\t\t\t\t\t\tif (event.key === 'Enter') {\n\t\t\t\t\t\t\thandleUsernameSearch();\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\tplaceholder=\"Github Username\"\n\t\t\t\t/>\n\t\t\t\t<InputGroup.Append>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\thandleUsernameSearch();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<FaSearch />\n\t\t\t\t\t</Button>\n\t\t\t\t</InputGroup.Append>\n\t\t\t</InputGroup>\n\t\t\t{warningText && <span className=\"SearchForm__WarningText\">{warningText}</span>}\n\t\t</>\n\t);\n};\n\nexport default SearchForm;\n","// React\nimport React from 'react';\n\n// Bootstrap\nimport Card from 'react-bootstrap/Card';\n\n// CSS\nimport './ProjectCard.scss';\n\n// Icons\nimport { GoGitBranch, GoStar } from 'react-icons/go';\n\ninterface ProjectCardProps {\n\trepository: {\n\t\tid: string;\n\t\tname?: string;\n\t\tdescription?: string;\n\t\turl?: string;\n\t\tforkCount?: number;\n\t\tstargazers?: {\n\t\t\ttotalCount: number;\n\t\t};\n\t};\n}\n\nconst ProjectCard: React.FC<ProjectCardProps> = (props) => {\n\tconst { repository } = props;\n\n\treturn (\n\t\t<Card className=\"ProjectCard\">\n\t\t\t<Card.Body>\n\t\t\t\t<Card.Title>{repository.name}</Card.Title>\n\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<GoGitBranch /> {repository.forkCount}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className=\"ProjectCard__CardSubtitle--span\">\n\t\t\t\t\t\t<GoStar /> {repository.stargazers?.totalCount}\n\t\t\t\t\t</span>\n\t\t\t\t</Card.Subtitle>\n\t\t\t\t<Card.Text>{repository.description}</Card.Text>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\nexport default ProjectCard;\n","// React\nimport React from 'react';\n\n// Bootstrap\nimport Card from 'react-bootstrap/Card';\n\n// CSS\nimport './AvatarCard.scss';\n\n// Constants\nimport { WATCHING, REPOSITORIES } from '../constants/avatarcard';\n\n// Icons\nimport { FaGithub, FaUsers } from 'react-icons/fa';\nimport { GoRepoForked } from 'react-icons/go';\n\ninterface AvatarCardProps {\n\tlogin: string;\n\tavatarUrl?: string;\n\tbio?: string;\n\trepositoriesCount?: number;\n\twatchingCount?: number;\n}\n\nconst AvatarCard: React.FC<AvatarCardProps> = (props) => {\n\tconst { login, avatarUrl, bio, repositoriesCount, watchingCount } = props;\n\n\treturn (\n\t\t<div className=\"AvatarCard\">\n\t\t\t<Card>\n\t\t\t\t<Card.Img variant=\"top\" src={avatarUrl} />\n\t\t\t\t<Card.Body className=\"AvatarCard__Card--body\">\n\t\t\t\t\t<Card.Title>{login}</Card.Title>\n\t\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">{bio}</Card.Subtitle>\n\t\t\t\t</Card.Body>\n\t\t\t</Card>\n\n\t\t\t<div className=\"AvatarCard__Username\">\n\t\t\t\t<FaGithub />\n\t\t\t\t<span>{login}</span>\n\t\t\t</div>\n\t\t\t<div className=\"AvatarCard__Watching\">\n\t\t\t\t<FaUsers />\n\t\t\t\t<span>\n\t\t\t\t\t{watchingCount} {WATCHING}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div className=\"AvatarCard__Repositories\">\n\t\t\t\t<GoRepoForked />\n\t\t\t\t<span>\n\t\t\t\t\t{repositoriesCount} {REPOSITORIES}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default AvatarCard;\n","export const WATCHING = 'Followers';\nexport const REPOSITORIES = 'Repositories';\n","// Api\nimport axios from 'axios';\n\n/**\n * Generate a new connection to the GitHub GraphQL API\n *\n * @returns {}\n */\nconst setupGitHubConnection = () => {\n\treturn axios.create({\n\t\tbaseURL: 'https://api.github.com/graphql',\n\t\theaders: {\n\t\t\tAuthorization: `bearer ${process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN}`,\n\t\t},\n\t});\n};\n\n/**\n * Search through the Github GraphQL to find a Github User.\n *\n * @param {string} inputFieldGitHubUser\n * @returns {array}\n */\nexport const searchForGithubProfile = async (inputFieldGitHubUser: string) => {\n\tconst GET_USER = `\n    {\n        user(login: \"${inputFieldGitHubUser}\" ) {\n\t\t\tlogin\n            avatarUrl\n\t\t\tbio\n\t\t\trepositories {\n\t\t\t\ttotalCount\n\t\t\t}\n\t\t\twatching {\n\t\t\t\ttotalCount\n\t\t\t}\n        }\n    }\n    `;\n\n\treturn await setupGitHubConnection()\n\t\t.post('', { query: GET_USER })\n\t\t.then((result) => {\n\t\t\tif (result.data.errors) throw new Error('Invalid Query Provided.');\n\t\t\treturn result.data.data.user;\n\t\t})\n\t\t.catch((error) => {\n\t\t\t// Up Up and Away\n\t\t\tthrow error;\n\t\t});\n};\n\n/**\n * Search through the Github GraphQL to find the top 4 repositories of a Github User.\n *\n * @param {string} inputFieldGitHubUser\n * @returns {array}\n */\nexport const searchForGithubTopRepositories = async (inputFieldGitHubUser: string) => {\n\tconst GET_TOP_REPOSITORIES = `\n\t{\n\t\tuser(login: \"${inputFieldGitHubUser}\") {\n\t\t\trepositories(orderBy: {field: CREATED_AT, direction: DESC}, first: 4) {\n\t\t\t\tedges {\n\t\t\t\t\tnode {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\tdescription\n\t\t\t\t\t\turl\n\t\t\t\t\t\tforkCount\n\t\t\t\t\t\tstargazers {\n\t\t\t\t\t\t\ttotalCount\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t`;\n\n\treturn await setupGitHubConnection()\n\t\t.post('', { query: GET_TOP_REPOSITORIES })\n\t\t.then((result) => {\n\t\t\tif (result.data.errors) throw new Error('Invalid Query Provided.');\n\t\t\treturn result.data.data.user.repositories.edges;\n\t\t})\n\t\t.catch((error) => {\n\t\t\t// Up Up and Away\n\t\t\tthrow error;\n\t\t});\n};\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// CSS\nimport './GithubProfile.scss';\n\n// Constants\nimport { GITHUB_PROFILE_HEADER } from '../constants/general';\n\n// Components\nimport SearchForm from './SearchForm';\nimport ProjectCard from './ProjectCard';\nimport AvatarCard from './AvatarCard';\n\n// Api\nimport { searchForGithubProfile, searchForGithubTopRepositories } from '../api/GithubApi';\n\nconst GithubProfile = () => {\n\tconst [inputFieldGitHubUser, setInputFieldGitHubUser] = useState('');\n\tconst [githubUser, setGithubUser] = useState({\n\t\tlogin: '',\n\t\tavatarUrl: '',\n\t\tbio: '',\n\t\trepositories: {\n\t\t\ttotalCount: 0,\n\t\t},\n\t\twatching: {\n\t\t\ttotalCount: 0,\n\t\t},\n\t});\n\tconst [githubTopRepositories, setGithubTopRepositories] = useState([\n\t\t{\n\t\t\tnode: {\n\t\t\t\tid: '',\n\t\t\t\tcreatedAt: '',\n\t\t\t\tname: '',\n\t\t\t\tdescription: '',\n\t\t\t\turl: '',\n\t\t\t\tforkCount: 0,\n\t\t\t\tstargazers: {\n\t\t\t\t\ttotalCount: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t]);\n\tconst [errorText, setErrorText] = useState('');\n\n\tuseEffect(() => {\n\t\t/**\n\t\t * Searches through the Github GraphQL Database for the User.\n\t\t */\n\t\tasync function searchForGitHubUser() {\n\t\t\ttry {\n\t\t\t\tconst result = await searchForGithubProfile(inputFieldGitHubUser);\n\t\t\t\tsetGithubUser(result);\n\t\t\t\tsetErrorText('');\n\t\t\t} catch (error) {\n\t\t\t\tsetErrorText(error.message);\n\t\t\t}\n\t\t}\n\n\t\tif (inputFieldGitHubUser.length !== 0) searchForGitHubUser();\n\t}, [inputFieldGitHubUser]);\n\n\tuseEffect(() => {\n\t\t/**\n\t\t * Searches through the Github GraphQL Database for the repositories of the User.\n\t\t */\n\t\tasync function searchForGithubRepositories() {\n\t\t\ttry {\n\t\t\t\tconst result = await searchForGithubTopRepositories(inputFieldGitHubUser);\n\t\t\t\tsetGithubTopRepositories(result);\n\t\t\t\tsetErrorText('');\n\t\t\t} catch (error) {\n\t\t\t\tsetErrorText(error.message);\n\t\t\t}\n\t\t}\n\n\t\tif (inputFieldGitHubUser.length !== 0) searchForGithubRepositories();\n\t}, [inputFieldGitHubUser]);\n\n\t/**\n\t * Updates the State of Github User\n\t *\n\t * @param {string} githubUser\n\t * @returns {void}\n\t */\n\tconst setNewGithubUser = (githubUser: string) => {\n\t\tsetInputFieldGitHubUser(githubUser);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"GithubProfiles\">\n\t\t\t\t<header className=\"GithubProfiles__header\">\n\t\t\t\t\t<p>{GITHUB_PROFILE_HEADER}</p>\n\t\t\t\t</header>\n\t\t\t\t<SearchForm setNewGithubUser={setNewGithubUser} errorText={errorText} />\n\t\t\t</div>\n\t\t\t<div className=\"GithubContainer\">\n\t\t\t\t<div className=\"GithubContainer__Wrapper\">\n\t\t\t\t\t<div className=\"GithubContainer__Avatar\">\n\t\t\t\t\t\t{githubUser.login && (\n\t\t\t\t\t\t\t<AvatarCard\n\t\t\t\t\t\t\t\tlogin={githubUser.login}\n\t\t\t\t\t\t\t\tavatarUrl={githubUser.avatarUrl}\n\t\t\t\t\t\t\t\tbio={githubUser.bio}\n\t\t\t\t\t\t\t\trepositoriesCount={githubUser.repositories.totalCount}\n\t\t\t\t\t\t\t\twatchingCount={githubUser.watching.totalCount}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"GithubContainer__Repositories\">\n\t\t\t\t\t\t{/* TODO: find a better way to do this. */}\n\t\t\t\t\t\t{githubTopRepositories[0].node.id && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<div className=\"GithubContainer__Repositories--firstRow\">\n\t\t\t\t\t\t\t\t\t<ProjectCard repository={githubTopRepositories[0].node} />\n\t\t\t\t\t\t\t\t\t<ProjectCard repository={githubTopRepositories[1].node} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"GithubContainer__Repositories--secondRow\">\n\t\t\t\t\t\t\t\t\t<ProjectCard repository={githubTopRepositories[2].node} />\n\t\t\t\t\t\t\t\t\t<ProjectCard repository={githubTopRepositories[3].node} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default GithubProfile;\n","export const GITHUB_PROFILE_HEADER = 'Github Profiles';\n","// React\nimport React from 'react';\n\n// Components\nimport GithubProfile from './components/GithubProfile';\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<GithubProfile />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// CSS\nimport './index.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Component\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}